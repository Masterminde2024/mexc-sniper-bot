[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src", "api"]

[project]
name = "mexc-sniper-bot"
version = "0.1.0"
description = "AI-powered MEXC cryptocurrency trading bot"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.111.0",
    "openai-agents>=0.0.16",
    "uvicorn[standard]>=0.30.1",
    "python-dotenv>=1.0.1",
    "httpx>=0.27.0",
    "pydantic>=2.7.4",
    "inngest>=0.4.0",
    "aiohttp==3.9.5",
    "sqlmodel==0.0.18",
    "alembic==1.13.1",
    "asyncpg==0.29.0",
    "aiosqlite==0.20.0",
    "greenlet>=3.0.0",
    "redis==5.0.4",
    "libsql-experimental>=0.0.34",
    "tenacity==8.3.0",
    "asyncache==0.3.1",
    "python-multipart==0.0.9",
    "cryptography==42.0.5",
    "ruff>=0.4.9",
    "pytest>=8.2.2",
    "pytest-asyncio>=0.23.7",
    "respx>=0.22.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.2",
    "pytest-asyncio==0.23.7",
    "pytest-cov==5.0.0",
    "ruff==0.4.9",
    "pyright==1.1.366",
    "respx>=0.20.0",
]

[tool.ruff]
line-length = 120
target-version = "py39"
src = ["src", "api", "tests"]
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "NPY", # numpy-specific rules
    "PD",  # pandas-vet
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "W293",  # blank line contains whitespace
    "EM101", # raw string in exception
    "EM102", # f-string in exception
    "G004",  # f-string in logging
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
]
extend-ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Missing docstrings
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"start_mexc_agent.py" = ["F401", "T20"]
"tests/**/*.py" = ["S101", "PLR2004", "ARG", "F401"]
"api/agents.py" = ["PLR0912", "PLR0913"]  # too many branches/arguments

[tool.ruff.lint.isort]
known-first-party = ["src", "api", "tests"]
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["src", "api", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv"]
typeCheckingMode = "basic"
pythonVersion = "3.9"

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src", "api"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
