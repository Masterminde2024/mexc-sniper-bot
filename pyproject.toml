[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src", "api"]

[project]
name = "mexc-sniper-bot"
version = "0.1.0"
description = "AI-powered MEXC cryptocurrency trading bot"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.111.0",
    "openai-agents>=0.0.16",
    "uvicorn[standard]>=0.30.1",
    "python-dotenv>=1.0.1",
    "httpx>=0.27.0",
    "pydantic>=2.7.4",
    "inngest>=0.4.0",
    "aiohttp==3.9.5",
    "sqlmodel==0.0.24",
    "alembic==1.13.1",
    "asyncpg==0.30.0",
    "aiosqlite==0.21.0",
    "greenlet>=3.0.0",
    "redis==6.2.0",
    "libsql-experimental>=0.0.34",
    "tenacity==9.1.2",
    "asyncache==0.3.1",
    "python-multipart==0.0.20",
    "cryptography==45.0.3",
    "ruff>=0.11.12",
    "pytest>=8.2.2",
    "pytest-asyncio>=1.0.0",
    "respx>=0.22.0",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.2.2",
    "pytest-asyncio==1.0.0",
    "pytest-cov==6.1.1",
    "ruff==0.11.12",
    "pyright==1.1.366",
    "respx>=0.20.0",
]

[dependency-groups]
dev = [
    "pyright>=1.1.366",
]

[tool.ruff]
line-length = 120
target-version = "py39"
src = ["src", "api", "tests"]
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "NPY", # numpy-specific rules
    "PD",  # pandas-vet
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "W293",    # blank line contains whitespace
    "EM101",   # raw string in exception
    "EM102",   # f-string in exception
    "G004",    # f-string in logging
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "T201",    # print statements (allow for debugging)
    "DTZ005",  # timezone-naive datetime (often not needed)
    "B904",    # raise without from (sometimes cleaner)
    "PLW0603", # global statement (sometimes necessary)
    "ARG001",  # unused function argument (common in handlers)
    "ARG002",  # unused method argument (common in overrides)
    "RET504",  # unnecessary assignment before return
    "SIM108",  # if-else-block assignable to ternary (readability)
    "PIE800",  # unnecessary spread (sometimes clearer)
    "PT011",   # pytest raises too broad (sometimes intentional)
    "ISC001",  # implicit string concatenation (conflicts with formatter)
    "C408",    # unnecessary dict call (dict() can be clearer)
    "UP015",   # redundant open modes (explicit is better)
    "UP007",   # Use X | Y for type annotations (SQLModel incompatible)
    "UP006",   # Use dict instead of Dict (legacy compatibility)
    "UP035",   # typing.Dict deprecated (legacy compatibility)
]
extend-ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Missing docstrings
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"start_mexc_agent.py" = ["F401", "T20"]
"tests/**/*.py" = ["S101", "PLR2004", "ARG", "F401"]
"api/agents.py" = ["PLR0912", "PLR0913"]  # too many branches/arguments
"src/models.py" = ["F821"]  # Undefined name errors for SQLModel compatibility

[tool.ruff.lint.isort]
known-first-party = ["src", "api", "tests"]
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["src", "api", "tests"]
exclude = ["**/node_modules", "**/__pycache__", ".venv"]
typeCheckingMode = "basic"
pythonVersion = "3.9"
reportUndefinedVariable = "none"  # Disable for SQLModel compatibility
reportAssignmentType = "warning"  # Downgrade SQLModel __tablename__ warnings

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src", "api"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
