# ==============================================================================
# MEXC Sniper Bot - Environment Configuration
# ==============================================================================
# Copy this file to .env.local and fill in your actual values
# 
# ‚ö†Ô∏è  SECURITY WARNING: Never commit .env.local to version control!
# ‚ö†Ô∏è  Real API keys and secrets must never be exposed publicly!
#
# This file provides all necessary environment variables for the MEXC sniper bot
# multi-agent TypeScript system with comprehensive trading capabilities.

# ==============================================================================
# üîê AUTHENTICATION - Kinde Auth (REQUIRED)
# ==============================================================================
# 
# Set up your Kinde account at https://kinde.com
# Create a new application and configure the following URLs:
# - Allowed callback URLs: http://localhost:3008/api/auth/kinde_callback
# - Allowed logout redirect URLs: http://localhost:3008
# - Application type: Regular web application

KINDE_CLIENT_ID="your-kinde-client-id"
KINDE_CLIENT_SECRET="your-kinde-client-secret"
KINDE_ISSUER_URL="https://your-domain.kinde.com"
KINDE_SITE_URL="http://localhost:3008"
KINDE_POST_LOGOUT_REDIRECT_URL="http://localhost:3008"
KINDE_POST_LOGIN_REDIRECT_URL="http://localhost:3008/dashboard"

# ==============================================================================
# ü§ñ AI INTEGRATION - OpenAI (REQUIRED for Multi-Agent System)
# ==============================================================================
# 
# The TypeScript multi-agent system requires OpenAI API access for:
# - MexcApiAgent: MEXC API analysis and signal extraction
# - PatternDiscoveryAgent: Ready state pattern detection
# - CalendarAgent: New listing discovery and monitoring
# - SymbolAnalysisAgent: Real-time readiness assessment
# - MexcOrchestrator: Multi-agent workflow coordination
# 
# Get your API key from https://platform.openai.com/api-keys

OPENAI_API_KEY="sk-your-openai-api-key"

# Optional: Additional AI services for enhanced capabilities
ANTHROPIC_API_KEY="sk-ant-your-anthropic-api-key"
GEMINI_API_KEY="your-gemini-api-key"
PERPLEXITY_API_KEY="pplx-your-perplexity-api-key"

# ==============================================================================
# üìä MEXC API INTEGRATION (OPTIONAL - for live trading)
# ==============================================================================
# 
# MEXC exchange API credentials for live trading operations.
# Get your keys from MEXC Exchange -> API Management
# 
# ‚ö†Ô∏è  PRODUCTION CRITICAL: Ensure your deployment IP is allowlisted
# in your MEXC API key settings to avoid signature validation errors.
# The system will work without these for demo/testing purposes.

MEXC_API_KEY="your-mexc-api-key"
MEXC_SECRET_KEY="your-mexc-secret-key"
MEXC_BASE_URL="https://api.mexc.com"
MEXC_WEBSOCKET_URL="wss://wbs.mexc.com/ws"

# MEXC API Performance Settings (Advanced)
# MEXC_TIMEOUT="30000"
# MEXC_RETRY_COUNT="3"
# MEXC_RETRY_DELAY="1000"
# MEXC_RATE_LIMIT_DELAY="100"

# ==============================================================================
# üîí SECURE ENCRYPTION (REQUIRED for storing API credentials)
# ==============================================================================
# 
# Master encryption key for securing stored API credentials in the database.
# This key is used by SecureEncryptionService for AES-256-GCM encryption.
# 
# üîë Generate a secure key using: openssl rand -base64 32
# ‚ö†Ô∏è  CRITICAL: Loss of this key means loss of all encrypted data!
# ‚ö†Ô∏è  Keep this key secure and backed up separately!

ENCRYPTION_MASTER_KEY="generate-with-openssl-rand-base64-32"

# Optional: Key ID for rotation tracking (advanced usage)
# ENCRYPTION_KEY_ID="default"

# Legacy encryption key (only needed during migration from old system)
# Run migration script: bun run scripts/migrate-encryption.ts --force
# OLD_ENCRYPTION_KEY="legacy-key-for-migration-only"

# ==============================================================================
# üóÑÔ∏è DATABASE CONFIGURATION
# ==============================================================================
# 
# The system supports both SQLite (local) and TursoDB (production).
# TursoDB is recommended for production deployments with global edge replication.

# Option 1: SQLite (Local Development - Default)
# Automatically used if TursoDB is not configured
DATABASE_URL="file:./mexc_sniper.db"

# Option 2: TursoDB (Production - Recommended)
# Set up TursoDB at https://turso.tech
# Run setup script: bun run setup:turso

TURSO_DATABASE_URL="libsql://your-database.turso.io"
TURSO_AUTH_TOKEN="your-turso-auth-token"
TURSO_DATABASE_NAME="mexc-sniper-bot"

# TursoDB Advanced Configuration (Optional)
TURSO_HOST="your-database.turso.io"
TURSO_EMBEDDED_PATH="./data/mexc_sniper_replica.db"
TURSO_SYNC_INTERVAL="30"
TURSO_REPLICA_URL="libsql://replica-url.turso.io"

# Database Mode Controls (Development)
# USE_EMBEDDED_REPLICA="true"    # Use local replica with sync
# FORCE_SQLITE="true"            # Force SQLite usage (override TursoDB)

# ==============================================================================
# ‚ö° WORKFLOW ORCHESTRATION - Inngest (AUTO-GENERATED)
# ==============================================================================
# 
# Inngest handles the TypeScript multi-agent workflows:
# - pollMexcCalendar: Multi-agent calendar discovery
# - watchMexcSymbol: Symbol monitoring with AI analysis  
# - analyzeMexcPatterns: Pattern discovery and validation
# - createMexcTradingStrategy: AI-powered strategy creation
# 
# These keys are auto-generated if not provided.
# For production, generate stable keys at https://app.inngest.com

INNGEST_SIGNING_KEY="signkey-dev-auto-generated-if-not-provided"
INNGEST_EVENT_KEY="auto-generated-event-key-for-local-development"

# Production Inngest (set these for stable production keys)
# INNGEST_SIGNING_KEY="signkey-prod-your-production-key"
# INNGEST_EVENT_KEY="your-production-event-key"

# ==============================================================================
# üìà CACHING & PERFORMANCE (OPTIONAL)
# ==============================================================================
# 
# Redis/Valkey for caching and rate limiting (optional but recommended for production)

VALKEY_URL="redis://localhost:6379/0"
# Alternative Redis configurations:
# REDIS_URL="redis://localhost:6379/0"
# REDIS_HOST="localhost"
# REDIS_PORT="6379"
# REDIS_PASSWORD="your-redis-password"

# Cache Configuration
CACHE_ENABLED="true"
CACHE_PREFIX="mexc-sniper:"
CACHE_TTL="300"

# ==============================================================================
# üõ°Ô∏è RATE LIMITING & SECURITY (OPTIONAL)
# ==============================================================================
# 
# Rate limiting configuration for API protection

RATE_LIMIT_ENABLED="true"
RATE_LIMIT_REQUESTS="100"
RATE_LIMIT_WINDOW="60"

# ==============================================================================
# üöÄ DEPLOYMENT ENVIRONMENT (AUTO-DETECTED)
# ==============================================================================
# 
# These are typically set by deployment platforms

# Environment detection
# NODE_ENV="production"              # Set by platform
# VERCEL="1"                        # Set by Vercel
# RAILWAY_ENVIRONMENT="production"   # Set by Railway

# ==============================================================================
# üß™ TESTING & DEVELOPMENT (OPTIONAL)
# ==============================================================================
# 
# Testing and development specific variables

# Test environment bypass
# PLAYWRIGHT_TEST="true"        # Enable test mode for E2E tests
# VITEST="true"                 # Enable test mode for unit tests

# Debug modes
# DEBUG="mexc-api:*"            # Enable debug logging
# VERBOSE_LOGGING="true"        # Enable verbose logging

# ==============================================================================
# üìù SETUP INSTRUCTIONS
# ==============================================================================
# 
# 1. QUICK START (REQUIRED SETUP):
#    ‚úÖ Copy this file to .env.local
#    ‚úÖ Set up Kinde Auth account and configure KINDE_* variables
#    ‚úÖ Get OpenAI API key for AI agent functionality
#    ‚úÖ Generate encryption master key: openssl rand -base64 32
# 
# 2. PRODUCTION SETUP:
#    ‚úÖ Set up TursoDB account and configure TURSO_* variables
#    ‚úÖ Configure MEXC API credentials (ensure IP allowlisting)
#    ‚úÖ Set up Redis/Valkey for caching
#    ‚úÖ Generate stable Inngest keys for production
# 
# 3. OPTIONAL FEATURES:
#    ‚ö†Ô∏è  Add additional AI service keys for enhanced capabilities
#    ‚ö†Ô∏è  Configure rate limiting for API protection
#    ‚ö†Ô∏è  Set up monitoring and logging services
# 
# 4. SECURITY CHECKLIST:
#    üîí Never commit real API keys to version control
#    üîí Use strong, unique encryption keys
#    üîí Allowlist deployment IPs for MEXC API
#    üîí Enable rate limiting in production
#    üîí Backup encryption keys securely
# 
# 5. VERIFICATION:
#    üß™ Run: bun run db:check (test database connection)
#    üß™ Run: npm run build (verify configuration)
#    üß™ Run: npm run test (run test suite)
#    üß™ Check: /api/health/db (health check endpoint)

# ==============================================================================
# üîç TROUBLESHOOTING
# ==============================================================================
# 
# Common Issues and Solutions:
# 
# 1. "TursoDB connection failed"
#    üí° Verify TURSO_DATABASE_URL and TURSO_AUTH_TOKEN
#    üí° Check if IP is allowlisted in TursoDB dashboard
#    üí° Try FORCE_SQLITE=true for local development
# 
# 2. "MEXC API signature validation failed" 
#    üí° Ensure deployment IP is allowlisted in MEXC API settings
#    üí° Verify MEXC_API_KEY and MEXC_SECRET_KEY are correct
#    üí° Check server time synchronization
# 
# 3. "Authentication required" errors
#    üí° Verify all KINDE_* variables are set correctly
#    üí° Check Kinde app configuration matches URLs
#    üí° Ensure KINDE_SITE_URL matches your deployment URL
# 
# 4. "OpenAI API failed" errors
#    üí° Verify OPENAI_API_KEY is valid and has sufficient credits
#    üí° Check API usage limits in OpenAI dashboard
# 
# 5. "Failed to decrypt data" errors
#    üí° Ensure ENCRYPTION_MASTER_KEY matches the one used to encrypt data
#    üí° If migrating, set OLD_ENCRYPTION_KEY for migration script
#    üí° Run: bun run scripts/migrate-encryption.ts --force
# 
# 6. TypeScript multi-agent workflow issues
#    üí° Check INNGEST_* variables are set
#    üí° Verify Inngest dev server is running: npx inngest-cli dev
#    üí° Check agent logs in browser console or server logs
# 
# For more help, see: /docs/guides/QUICKSTART.md

# ==============================================================================
# üèóÔ∏è SYSTEM ARCHITECTURE NOTES
# ==============================================================================
# 
# This MEXC Sniper Bot features:
# - ü§ñ 5 specialized TypeScript AI agents with GPT-4 integration
# - ‚ö° Inngest workflow orchestration for reliable event-driven tasks
# - üóÑÔ∏è Drizzle ORM with SQLite/TursoDB support for data persistence
# - üîÑ TanStack Query for real-time data fetching and caching
# - üîê Kinde Auth for secure user authentication
# - üè¢ Serverless deployment optimized for Vercel with edge functions
# - üìä Real-time MEXC exchange integration for trading signals
# - üéØ Pattern discovery for ready state detection (sts:2, st:2, tt:4)
# - üíº User-configurable take profit levels and risk management
# 
# The system operates entirely in TypeScript with no Python dependencies,
# designed for modern serverless deployment with global edge optimization.